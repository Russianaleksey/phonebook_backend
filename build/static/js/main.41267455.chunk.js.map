{"version":3,"sources":["Components/NumbersDisplay.js","Components/Search.js","Api/connect.js","Components/AddPersonMenu.js","App.js","serviceWorker.js","index.js"],"names":["NumbersDisplay","_ref","people","map","person","react_default","a","createElement","key","name","number","Search","persons","setSearchField","setSearchResults","searchField","searchResults","onSubmit","event","preventDefault","results","filter","length","value","onChange","target","type","Components_NumbersDisplay","newPerson","axios","post","AddPersonMenu","setNewName","setPhoneNum","setPersons","newName","phoneNum","holder","alert","concat","then","_ref2","data","catch","error","console","log","App","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","useEffect","get","response","Components_Search","Components_AddPersonMenu","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41267455.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst NumbersDisplay = ({ people }) => {\r\n    return (\r\n        people.map((person) => {\r\n            return (\r\n                <tr key={person.name}>\r\n                    <td>{person.name}</td>\r\n                    <td>{person.number}</td>\r\n                </tr>\r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nexport default NumbersDisplay","import React from 'react'\r\nimport NumbersDisplay from './NumbersDisplay'\r\n\r\nconst Search = ({ persons, setSearchField, setSearchResults, searchField, searchResults }) => {\r\n\r\n    const handleSearch = (event) => {\r\n        setSearchField(event.target.value)\r\n    }\r\n\r\n    const search = (event) => {\r\n        event.preventDefault()\r\n        const results = persons.filter(person => person.name === searchField)\r\n        if (results.length !== 0) {\r\n            setSearchResults(results)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h4>Search</h4>\r\n            <form onSubmit={search}>\r\n                <div>\r\n                    search: <input\r\n                        value={searchField}\r\n                        onChange={handleSearch}\r\n                    />\r\n                    <button type=\"submit\">search</button>\r\n                </div>\r\n            </form>\r\n            {(searchResults.length !== 0) && <h4>Search Results</h4>}\r\n            <table>\r\n                <tbody>\r\n                    <NumbersDisplay people={searchResults} />\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search","import axios from 'axios'\r\n\r\nconst newPerson = (person) => {\r\n    return axios.post('http://localhost:3001/api/persons', person)\r\n}\r\n\r\nexport default newPerson","import React from 'react'\r\nimport newPerson from '../Api/connect'\r\n\r\nconst AddPersonMenu = ({ setNewName, setPhoneNum, persons, setPersons, newName, phoneNum }) => {\r\n    const handleNameChange = (event) => {\r\n        setNewName(event.target.value)\r\n    }\r\n\r\n    const handlePhoneChange = (event) => {\r\n        setPhoneNum(event.target.value)\r\n    }\r\n\r\n    const addPerson = (event) => {\r\n        event.preventDefault()\r\n        const holder = { name: newName, number: phoneNum }\r\n        if (persons.filter(person => person.name === newName).length !== 0) {\r\n            alert(`${newName} is already in the phonebook. Please try again.`)\r\n            setNewName('')\r\n        } else {\r\n            newPerson(holder).then(({ data }) => setPersons(persons.concat([data]))).catch(error => console.log(error))\r\n            setNewName('');\r\n            setPhoneNum('');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>Add a person</h3>\r\n            <form onSubmit={addPerson}>\r\n                <div>\r\n                    name: <input\r\n                        value={newName}\r\n                        onChange={handleNameChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    phone number: <input\r\n                        value={phoneNum}\r\n                        onChange={handlePhoneChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\">add</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddPersonMenu","import React, { useState, useEffect } from 'react'\r\nimport NumbersDisplay from './Components/NumbersDisplay'\r\nimport Search from './Components/Search'\r\nimport AddPersonMenu from './Components/AddPersonMenu';\r\nimport axios from 'axios'\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([])\r\n  const [newName, setNewName] = useState('')\r\n  const [phoneNum, setPhoneNum] = useState('')\r\n  const [searchField, setSearchField] = useState('')\r\n  const [searchResults, setSearchResults] = useState([])\r\n\r\n  const baseUrl = '/api/persons'\r\n\r\n  const hook = () => {\r\n    axios.get(baseUrl).then(response => {\r\n      const data = response.data\r\n      setPersons(data)\r\n    })\r\n  }\r\n\r\n  useEffect(hook, [])\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Search persons={persons} setSearchField={setSearchField} setSearchResults={setSearchResults} searchField={searchField} searchResults={searchResults} />\r\n      <AddPersonMenu setNewName={setNewName} setPhoneNum={setPhoneNum} persons={persons} setPersons={setPersons} newName={newName} phoneNum={phoneNum} />\r\n      <h2>Numbers</h2>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Phone Number</th>\r\n          </tr>\r\n          <NumbersDisplay people={persons} />\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}