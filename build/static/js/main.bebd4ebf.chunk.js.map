{"version":3,"sources":["Components/NumbersDisplay.js","Components/Search.js","Api/connect.js","Components/AddPersonMenu.js","App.js","serviceWorker.js","index.js"],"names":["NumbersDisplay","_ref","people","map","person","react_default","a","createElement","key","name","number","Search","persons","setSearchField","setSearchResults","searchField","searchResults","onSubmit","event","preventDefault","results","filter","length","value","onChange","target","type","Components_NumbersDisplay","newPerson","axios","post","AddPersonMenu","setNewName","setPhoneNum","setPersons","newName","phoneNum","holder","alert","concat","then","_ref2","data","catch","error","console","log","App","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","useEffect","get","response","Components_Search","Components_AddPersonMenu","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bebd4ebf.chunk.js","sourcesContent":["import React from 'react'\n\nconst NumbersDisplay = ({ people }) => {\n    return (\n        people.map((person) => {\n            return (\n                <tr key={person.name}>\n                    <td>{person.name}</td>\n                    <td>{person.number}</td>\n                </tr>\n            )\n        })\n    )\n}\n\nexport default NumbersDisplay","import React from 'react'\nimport NumbersDisplay from './NumbersDisplay'\n\nconst Search = ({ persons, setSearchField, setSearchResults, searchField, searchResults }) => {\n\n    const handleSearch = (event) => {\n        setSearchField(event.target.value)\n    }\n\n    const search = (event) => {\n        event.preventDefault()\n        const results = persons.filter(person => person.name === searchField)\n        if (results.length !== 0) {\n            setSearchResults(results)\n        }\n    }\n\n    return (\n        <div>\n            <h4>Search</h4>\n            <form onSubmit={search}>\n                <div>\n                    search: <input\n                        value={searchField}\n                        onChange={handleSearch}\n                    />\n                    <button type=\"submit\">search</button>\n                </div>\n            </form>\n            {(searchResults.length !== 0) && <h4>Search Results</h4>}\n            <table>\n                <tbody>\n                    <NumbersDisplay people={searchResults} />\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Search","import axios from 'axios'\n\nconst baseUrl = \"/api/persons\"\n\nconst newPerson = (person) => {\n    return axios.post(baseUrl, person)\n}\n\nexport default newPerson","import React from 'react'\nimport newPerson from '../Api/connect'\n\nconst AddPersonMenu = ({ setNewName, setPhoneNum, persons, setPersons, newName, phoneNum }) => {\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n\n    const handlePhoneChange = (event) => {\n        setPhoneNum(event.target.value)\n    }\n\n    const addPerson = (event) => {\n        event.preventDefault()\n        const holder = { name: newName, number: phoneNum }\n        if (persons.filter(person => person.name === newName).length !== 0) {\n            alert(`${newName} is already in the phonebook. Please try again.`)\n            setNewName('')\n        } else {\n            newPerson(holder).then(({ data }) => setPersons(persons.concat([data]))).catch(error => console.log(error))\n            setNewName('');\n            setPhoneNum('');\n        }\n    }\n\n\n    return (\n        <div>\n            <h3>Add a person</h3>\n            <form onSubmit={addPerson}>\n                <div>\n                    name: <input\n                        value={newName}\n                        onChange={handleNameChange}\n                    />\n                </div>\n                <div>\n                    phone number: <input\n                        value={phoneNum}\n                        onChange={handlePhoneChange}\n                    />\n                </div>\n                <div>\n                    <button type=\"submit\">add</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default AddPersonMenu","import React, { useState, useEffect } from 'react'\nimport NumbersDisplay from './Components/NumbersDisplay'\nimport Search from './Components/Search'\nimport AddPersonMenu from './Components/AddPersonMenu';\nimport axios from 'axios'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [phoneNum, setPhoneNum] = useState('')\n  const [searchField, setSearchField] = useState('')\n  const [searchResults, setSearchResults] = useState([])\n\n  const baseUrl = '/api/persons'\n\n  const hook = () => {\n    axios.get(baseUrl).then(response => {\n      const data = response.data\n      setPersons(data)\n    })\n  }\n\n  useEffect(hook, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Search persons={persons} setSearchField={setSearchField} setSearchResults={setSearchResults} searchField={searchField} searchResults={searchResults} />\n      <AddPersonMenu setNewName={setNewName} setPhoneNum={setPhoneNum} persons={persons} setPersons={setPersons} newName={newName} phoneNum={phoneNum} />\n      <h2>Numbers</h2>\n      <table>\n        <tbody>\n          <tr>\n            <th>Name</th>\n            <th>Phone Number</th>\n          </tr>\n          <NumbersDisplay people={persons} />\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}